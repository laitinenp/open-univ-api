openapi: '3.0.0'
info:
 version: 1.0.0
 title: (v1.0) open-univ project
 description: (v1.0) For educational purposes only. Petri Laitinen, Karelia UAS
servers:
 - url: https://localhost:3000/
   description: (v1.0) "Open University Sample API Application"

paths:
  /api/users:
    post:
      summary: Creates an object of type User
      tags: 
        - Access Control
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requests/UserRequest'
      responses:
        '201':
          description: (v1.0) A new user has been succesfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '415':
          description: Unsupported media type
        default:
          description: Unexpected error

  /api/sessions:
    post:
      summary: Login functionality. Creates JWT Token and passes it back for a caller.
      tags: 
        - Access Control
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requests/LoginRequest'
      responses:
        '201':
          description: (v1.0) A new JWT access token has been succesfully created
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserSession'
        '401':
            description: (v1.0) Not authorized
        '415':
          description: Unsupported Media Type
        default:
          description: Unexpected error

  /api/sessions/{userId}:
    delete:
      summary: Logout functionality.
      tags: 
        - Access Control
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/JWTHeaderToken'
      requestBody:
        required: false
      responses:
        '204':
          description: No content

  /api/users/{userId}/cart:
    get:
      summary: Returns a customer shopping cart
      tags: 
        - Customer Services
      parameters:
        - $ref: '#/components/parameters/UserId'  # Authorization required for a Customer Services
        - $ref: '#/components/parameters/JWTHeaderToken'
      security:
        - bearerAuth: []
      operationId: getCart
      responses:
        '200':
          description: (v1.0) Succesfully returned a Customer Services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '401':
          description: Unauhtorized
        '415':
          description: Unsupported Media Type
        default:
          description: Unexpected error

  /api/ous/checkout:
    post:
      summary: Checkout all the services added into the shopping cart
      tags:
        - Customer Services
      parameters:
        - in: path
          name: customer_id
          schema:
            type: integer
            example: 123
          required: true
          decription: numerical customer identifier
        - $ref: '#/components/parameters/AuthorizationHeader'  # Authorization required for a Customer Services
      security:
        - bearerAuth: []
      operationId: postCart
      responses:
        '501':
          description: (v1.0) Not yet implemented
          content:
            application/json:
              schema:
                type: string

  /api/courses:
    get:
      summary: Returns a list of available courses
      tags: 
        - Courses
      operationId: listCourses
      responses:
        '200':
          description: (v1.0) Succesfully returned a list of available courses
          content:
            application/json:
              schema:
                description: list of service descriptors
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '415':
          description: Unsupported Media Type
    head:
      summary: For testing if the resource URI is available
      tags:
        - Courses
      operationId: listCourses
      responses:
        '204':
          description: No content

    options:
      summary: Returns a list of applicable HTTP verbs in the Allow header field.
      tags:
        - Courses
      operationId: listCourses
      responses:
        204:
          description: No content. Response data in the Allow header field.
          headers:
            Allow:
              schema:
                type: string
              description: Comma separated list of HTTP Verbs, e.g. GET, OPTIONS, HEAD, POST

  /api/courses/{courseId}:
    get:
      summary: Returns a course
      tags: 
        - Courses
      parameters:
        - in: path
          name: courseId
          schema:
            type: string
            format: uuid
            example: DD10004
          required: true
          decription: numerical customer identifier
      operationId: getCourse
      responses:
        '200':
          description: (v1.0) Succesfully returned a course object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          description: Not found
        '415':
          description: Unsupported Media Type
        default:
          description: Unexpected error
    put:
      summary: Updates a Course object. If it does not exist before, then it is created.
      tags: 
        - Courses
      operationId: putCourse
      parameters:
        - in: path
          name: course_id
          schema:
            type: string
            format: uuid
            example: DD10004
          required: true
          decription: numerical customer identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: (v1.0) A course object has been succesfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '201':
          description: (v1.0) A new courses has been succesfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '415':
          description: Unsupported Media Type
        default:
          description: Unexpected error

  /api/services:
    get:
      summary: Returns a list of available courses
      parameters:
        - $ref: '#/components/parameters/OrderByAscendingDescending'
        - $ref: '#/components/parameters/UserId'
      tags: 
        - Services
      operationId: listServices
      
      responses:
        '200':
          description: (v1.0) Succesfully returned a list of available services
          content:
            application/json:
              schema:
                description: list of service descriptors
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '415':
          description: Unsupported Media Type
    post:
      summary: Creates an object of type Service
      tags: 
        - Services
      operationId: createService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requests/CreateServiceRequest'
      security:
        - bearerAuth: []
      responses:
        '201':
          description: (v1.0) A new customer has been succesfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '415':
          description: Unsupported Media Type
        default:
          description: Unexpected error

  /api/services/{service_id}:
    get:
      summary: Returns a service descriptor object
      tags: 
        - Services
      parameters:
      - name: service_id
        in: path
        required: true
        description: (v1.0) Service Identifier
        schema:
          type: string
          format: uuid
      operationId: findServiceById
      responses:
        200:
          description: (v1.0) Succesfully returned a service descriptor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

  /api/teams/studentservices/transcripts:
    post:
      summary: Request a transcript of records
      tags:
        - Customer Services
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
            example: '1234567890'
          required: true
          decription: numerical customer identifier
        - $ref: '#/components/parameters/AuthorizationHeader'  # Authorization required for a Customer Services
        - $ref: '#/components/requests/PostItemToCart'
      operationId: postCart
      security:
        - bearerAuth: []
      responses:
        '501':
          description: (v1.0) The service not yet implemented
          content:
            application/json:
              schema:
                type: string


tags:
  - name: Access Control
    description: (v1.0) Represents an access control functions
  - name: Courses
    description: (v1.0) Represents course descriptions
  - name: Services
    description: (v1.0) Represents service description objects
  - name: Customer Services
    description: (v1.0) Represents a Customer Services objects and data

components:

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  parameters:
    JWTHeaderToken: # Authorizattion HTTP request header field required for getting a Customer Services for a customer
      name: Authorize
      in: header
      schema:
        type: string
      description: JWT access token string received from server in the /api/session POST response
    JWTPathParameterToken: # Authorizattion HTTP request header field required for getting a Customer Services for a customer
      name: JWTPathParameterToken
      in: path
      schema:
        type: string
      description: JWT access token string received from server in the /api/session POST response
    OrderByAscendingDescending:
      name: OrderByAscendingDescending
      in: query
      schema:
        type: string
        enum: [ ascending, descending ]
        example: ascending
    UserId:
      name: userId
      in: query
      schema:
        type: integer
        example: 123

  requests:
    UserRequest:
      type: object
      properties:
        forename:
          type: string
          nullable: true
          description: (v1.0) forename
          maxLength: 100
        surname:
          type: string
          nullable: true
          description: (v1.0) family name
          maxLength: 100
        username:
          type: string
          nullable: true
          description: (v1.0) forename
          maxLength: 100
        password:
          type: string
          nullable: true
          description: (v1.0) forename
          maxLength: 100
        email:
          type: string
          nullable: true
          description: (v1.0) email address
          maxLength: 1024
      example:
        forename: Brita
        surname: Lollobrigida
        username: brita
        password: sosecret
        email: brita@somemail.com
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          nullable: false
          maxlength: 100
          example: brita
        password:
          type: string
          nullable: false
          maxLength: 100
          example: sosecret
    PostItemToCart:
      type: object
      properties:
        userid:
          type: integer
          nullable: false
        serviceid:
          type: string
          nullable: false
    CourseRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: (v1.0) course name
          maxLength: 100
        description:
          type: string
          nullable: true
          description: (v1.0) course description
          maxLength: 1024
        learningObjectives:
          type: string
          nullable: true
          description: (v1.0) learning objectives for the course
          maxLength: 1024   
      example:
        name: API Design & Development
        description: API Design & Development using REST, GraphQL and Open API
        learningObjectives: >
          Student knows the most common API technologies in use today
          Student is able to comprehend the opportunities and challenges in exploiting API's in businesses
          Student is able to design, document and implement REST APIs
          Student is able to design, document and implement GraphQL APIs
          Student is is able to apply OpenAPI Specification in describing and designing APIs    
    CreateServiceRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: (v1.0) Course implementation description
          maxLength: 100
          example: API Design & Development
        startDate:
          type: string
          format: date
          description: course starting day
          example: "2021-02-28"
        endDate:
          type: string
          format: date
          description: course end date. can be null.
          nullable: true
          example: "2021-06-30"
        course:
          $ref: '#/components/schemas/Course'

  responses:
    JWTAccessToken:
      name: JWTAccessToken
      description: JWT Access Token generated during the /api/login POST request
      schema:
        type: string
        example: a random looking AWT access token 1234567890
    UserSession:
      type: object
      properties:
        userId:
          type: integer
          nullable: false
          description: (v1.0) identifier
        forename:
          type: string
          nullable: false
          description: (v1.0) forename
          maxLength: 100
        surname:
          type: string
          nullable: false
          description: (v1.0) family name
          maxLength: 100
        username:
          type: string
          nullable: false
          description: (v1.0) forename
          maxLength: 100
        email:
          type: string
          nullable: false
          description: (v1.0) email address
          maxLength: 1024
        token:
          type: string
          nullable: false
          description: (v1.0) email address
          maxLength: 1024
      example:
        userId: 123
        forename: Brita
        surname: Lollobrigida
        username: brita
        email: brita@somemail.com
        token: 1234567890abc

  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
          nullable: false
          description: (v1.0) identifier
        forename:
          type: string
          nullable: false
          description: (v1.0) forename
          maxLength: 100
        surname:
          type: string
          nullable: false
          description: (v1.0) family name
          maxLength: 100
        username:
          type: string
          nullable: false
          description: (v1.0) forename
          maxLength: 100
        password:
          type: string
          nullable: false
          description: (v1.0) forename
          maxLength: 100
        email:
          type: string
          nullable: false
          description: (v1.0) email address
          maxLength: 1024
        services:
          type: array
          items:
            $ref: '#/components/schemas/Course'
      example:
        userId: 123
        forename: Brita
        surname: Lollobrigida
        username: brita
        password: sosecret
        email: brita@somemail.com

    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          description: (v1.0) identifier
        name:
          type: string
          nullable: true
          description: (v1.0) course name
          maxLength: 100
        description:
          type: string
          nullable: true
          description: (v1.0) course description
          maxLength: 1024
        learningObjectives:
          type: string
          nullable: true
          description: (v1.0) learning objectives for the course
          maxLength: 1024   
      example:
        id: DD10004
        name: API Design & Development
        description: API Design & Development using REST, GraphQL and Open API
        learningObjectives: >
          Student knows the most common API technologies in use today
          Student is able to comprehend the opportunities and challenges in exploiting API's in businesses
          Student is able to design, document and implement REST APIs
          Student is able to design, document and implement GraphQL APIs
          Student is is able to apply OpenAPI Specification in describing and designing APIs
    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          example: DD10004-3001
        name:
          type: string
          nullable: true
          description: (v1.0) Course implementation description
          maxLength: 100
          example: API Design & Development
        startDate:
          type: string
          format: date
          description: course starting day
          example: "2021-02-28"
        endDate:
          type: string
          format: date
          description: course end date. can be null.
          nullable: true
          example: "2021-06-30"
        course:
          $ref: '#/components/schemas/Course'